"""
Django settings for proj project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool(int(os.environ.get('DJANGO_DEBUG', '0')))

ALLOWED_HOSTS = ['*']

# Origin 请求头检查
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000', 'http://localhost:8000']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",
    "rest_framework_simplejwt",
    "django_filters",
    'channels',

    "base",
]

# DRF 配置
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    # 使用JWT身份验证
    "DEFAULT_AUTHENTICATION_CLASSES": ["rest_framework_simplejwt.authentication.JWTAuthentication"],
    # 自定义分页
    "DEFAULT_PAGINATION_CLASS": "proj.pagination.PageLimitNumberPagination",
    # 查询过滤 https://www.django-rest-framework.org/api-guide/filtering/
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    # SearchFilter 查询参数的名称
    "SEARCH_PARAM": "search",
    # OrderingFilter 查询参数的名称
    "ORDERING_PARAM": "ordering",
    # request.version 不存在版本控制信息时应使用的值
    # https://www.django-rest-framework.org/api-guide/versioning/
    "DEFAULT_VERSION": None,
    "VERSION_PARAM": "version",
    # 版本控制方案，默认None
    'DEFAULT_VERSIONING_CLASS': None,
    # 内部集成方法映射为REST方法
    "SCHEMA_COERCE_METHOD_NAMES": {'retrieve': 'read', 'destroy': 'delete'},
    # DateTimeField 字段的格式化
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
    # DateField 字段格式化
    "DATE_FORMAT": "%Y-%m-%d",
}

# JWT 配置
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#algorithm
SIMPLE_JWT = {
    # access_token有效时间
    "ACCESS_TOKEN_LIFETIME": timedelta(days=60) if DEBUG else timedelta(hours=2),
    # refresh_token有效时间
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    # 在跟新access_token时，同时返回新的refresh_token
    "ROTATE_REFRESH_TOKENS": False,
    # 将旧的refresh_token加入黑名单
    "BLACKLIST_AFTER_ROTATION": False,
    # 更新最后一次登录时间
    "UPDATE_LAST_LOGIN": True,

    # 对token执行签名/验证操作算法
    "ALGORITHM": "HS256",
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    # 用户模型中的PK字段
    "USER_ID_FIELD": "id",
    # token中携带的用户标识
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# 中间件
MIDDLEWARE = [
    # 缓存整个站点
    'django.middleware.cache.UpdateCacheMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 缓存整个站点
    'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proj.wsgi.application'
ASGI_APPLICATION = "proj.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER':  os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'db',  # Docker 容器名
        'PORT': os.environ.get('POSTGRES_PORT'),
        'CHARSET': 'UTF8',

        # 连接到数据库时要使用的额外参数
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
        'ATOMIC_REQUESTS': False,  # 将每个视图包裹在这个数据库的事务中
    }
}

# redis 缓存配置
# https://docs.djangoproject.com/zh-hans/4.0/topics/cache/#redis
CACHES = {
    # django 默认缓存
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': f'redis://{os.environ.get("REDIS_USER")}:{os.environ.get("REDIS_PASS")}@redis:{os.environ.get("REDIS_PORT")}',

        # 缓存的默认超时时间，以秒为单位,默认为 300 秒（5 分钟）
        # 这个过期时间在使用底层缓存 API时，作为缺省值提供
        # cache.set("ajanuw", 1)    过期时间为 TIMEOUT
        # cache.set("age", 1, 10)   10s过期
        'TIMEOUT': timedelta(minutes=5).seconds,

        'VERSION': 1,  # 缓存密钥版本号
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': f'redis://{os.environ.get("REDIS_USER")}:{os.environ.get("REDIS_PASS")}@redis:{os.environ.get("REDIS_PORT")}/13',
        'VERSION': 1,
    }
}

# 缓存中间件使用哪个缓存
CACHE_MIDDLEWARE_ALIAS = 'default'
# 缓存中间件缓存页面的过期时间
CACHE_MIDDLEWARE_SECONDS = timedelta(minutes=6).seconds

# ws 配置
# https://channels.readthedocs.io/en/stable/topics/channel_layers.html#redis-channel-layer
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [f'redis://{os.environ.get("REDIS_USER")}:{os.environ.get("REDIS_PASS")}@redis:{os.environ.get("REDIS_PORT")}/14']
        },
    },
}


# 默认的密码验证
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# 本次安装的语言代码的字符串, USE_I18N=True才有效
LANGUAGE_CODE = 'zh-Hans'
# 时区的字符串
TIME_ZONE = 'Asia/Shanghai'
# 启用 Django 的翻译系统
USE_I18N = True
# 使用时区感知
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'djstatic/'
STATIC_DIR = os.path.join(BASE_DIR, STATIC_URL)

# STATICFILES_DIRS 和 STATIC_ROOT 不能同时存在
# STATICFILES_DIRS 配置来至 staticfiles 应用程序，只能在DEBUG模式中使用
if DEBUG:
    STATICFILES_DIRS = [STATIC_DIR]
else:
    STATIC_ROOT = STATIC_DIR
os.makedirs(STATIC_DIR, exist_ok=True)

# 用户上传的文件
MEDIA_URL = 'djmedia/'
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL)
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

APPEND_SLASH = False

# 邮箱配置
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.qq.com"
EMAIL_PORT = 25
EMAIL_HOST_USER = "1641845087@qq.com"
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_TLS = True


# 控制Django存储sessions数据的地方
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# 选择要使用的缓存
SESSION_CACHE_ALIAS = 'sessions'
# 是否在用户关闭浏览器时结束会话
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

if DEBUG:
    LOGGING = {
        'version': 1,                       # dictConfig 格式版本

        # 禁用现有记录器
        # 默认日志: https://docs.djangoproject.com/zh-hans/4.0/ref/logging/#default-logging-definition
        'disable_existing_loggers': False,
        'level': 'DEBUG',  # 设置日志级别

        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',  # 使用格式化
            },
        },

        # 日志输出格式化
        'formatters': {
            'verbose': {
                'format': '{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '\n{levelname} {name} {asctime}\n{message}\n',
                'style': '{',
            },
        },

        'loggers': {
            # 配置记录器，将记录发送到处理程序
            # https://docs.djangoproject.com/zh-hans/4.0/ref/logging/#loggers
            'django.db.backends': {
                'level': 'DEBUG',
                'handlers': ['console'],
            },

            # 处理来自所有记录器的记录
            # '': {
            #     'level': 'ERROR',
            #     'handlers': ['console'],
            # },
        },
    }
else:
    os.makedirs(BASE_DIR / "djlogs", exist_ok=True)
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'level': 'ERROR',

        'handlers': {
            'file': {
                'level': 'ERROR',
                'class': 'logging.FileHandler',
                'filename':  BASE_DIR / "djlogs" / 'error.log',
                'formatter': 'simple',
            },
        },


        'formatters': {
            'simple': {
                'format': '{levelname} {name} {asctime} {message}',
                'style': '{',
            },
        },

        'loggers': {

            # 记录线上任何错误
            '': {
                'level': 'ERROR',
                'handlers': ['file'],
            },
        },
    }
